* While-loop

    Python keyword while has a conditional expression followed by the : symbol to start a block with increased indent. 
    This block has statements to be executed repeatedly. Such a block is usually referred to as the body of the loop. 
    The body will keep executing till the condition remains true. 
    If and when it turns out to be false, the program will come out of the loop. Consider the following example.

    Example
        num =0
        while num< 5:
            num = num + 1
            print("num =", num)

    Output : 
        num = 1
        num = 2
        num = 3
        num = 4
        num = 5

    Python program that successively takes a number as input from the user and calculates the average, as long as the user 
    enters a positive number.

        num=0
        count=0
        sum=0
        while num>=0:
            num=int(input("enter any number .. -1 to exit\n"))
            if num>=0:
                count=count+1 #this counts number of inputs 
                sum=sum+num # this adds input number cumulatively. 
        avg=sum/count
        print ("numbers input:",count, "average:",avg)

    When a negative number is provided by the user, the loop terminates and displays the average of the numbers provided so far. 
    A sample run of the above code is below:

    
    Output : 

        enter any number .. -1 to exit
        10
        enter any number .. -1 to exit
        20
        enter any number .. -1 to exit
        30
        enter any number .. -1 to exit
        -1
        numbers input: 3 average: 20.0

* Break Keyword in while: 

    The break keyword causes the abandonment of pending iterations of the current loop. 
    The execution of the program jumps to the statement immediately after the body of the loop. 

    Example : 
        
        num=0
        while num<5:
            num=num+1
            print ("Num =  {} ".format(num))
            if num==3:
                break
        print ("Out of loop")


* Continue keyword in while : 

    The effect of a continue statement is somewhat opposite to the break keyword. 
    Instead of abandoning the pending iterations in the loop, the continue statement skips the remaining statements in the current loop and starts the next iteration. 

    Example : 

        num=0
        while num<5:
            num=num+1        
            if num==3:
                continue
            print ("Num =  {} ".format(num))
        print ("Out of loop")

* For-loop: 

    Python's for keyword provides a more comprehensive mechanism to constitute a loop. 
    The for loop is used with sequence types such as list, tuple and set. 
    The body of the for loop is executed for each member element in the sequence. 
    Hence, it doesn't require explicit verification of Boolean expression controlling the loop (as in the while loop). 

    for x in sequence:
        statement1
        statement2
        ...
        statementN


    To start with, variable x in the for statement refers to the item at the 0 index in the sequence. 
    The block of statements with increased uniform indent after the : symbol will be executed. 
    Variable x now refers to the next item and repeats the body of the loop till the sequence is exhausted.

        >>> mylist=[10, 20, 30, 40, 50]
        >>> for i in mylist:
        ...  print(i)

    Output :

        10
        20
        30
        40
        50
    
    Example : For loop in tuple

        >>> mytuple=(10, "twenty", 30, "fourty", 50)
        >>> for i in mytuple:
        ...  print(i)

    Output : 
        10
        twenty
        30
        fourty
        50
    
    Example : For loop over dictionary

        dict={ 1:100, 2:200, 3:300 }
        for k,v in dict.items():
            print("key=" + k + ", value=" + v)

    Output:

        (1, 100)
        (2, 200)
        (3, 300) 

    Example : For loop over string

        for char in "Hello":
            print (char)

    Output : 
        H
        e
        l
        l
        o
    
* Nested-For Loop : 

    If a loop (for loop or while loop) contains another loop in its body block, we say that the two loops are nested. 
    If the outer loop is designed to perform m iterations and the inner loop is designed to perform n repetitions, the body block of the inner loop will get executed m X n times. 
    
    Example :

        for x in range(1,4):
            for y in range(1,3):
                print ("Hello World") 

    Output :

        Hello World
        Hello World
        Hello World
        Hello World
        Hello World
        Hello World  



* Break Keyword in for : 

    Example : 

        for num in range(1,6):
            print ("Num =  {} ".format(num))
            if num==3:
                break
        print ("Out of loop")


* Continue Keyword in for :

    Example : 

        for num in range(1,6):        
            if num==3:
                continue
            print ("Num =  {} ".format(num))
        print ("Out of loop")
    


