* Inheritance in Python : 

    We often come across different products that have a basic model and an advanced model with added features over and above basic model. 
    A software modelling approach of OOP enables extending the capability of an existing class to build a new class, instead of building from scratch. 
    In OOP terminology, this characteristic is called inheritance, the existing class is called base or parent class, while the new class is called child or sub class. 

    To make a class inherit from another, we apply the name of the base class in parentheses to the derived class’ definition.

    Syntax : 

            >>> class Person:
                    pass
            >>> class Student(Person):
                    pass
            >>> issubclass(Student,Person)

* Types of Inheritance :

    1) Single Inheritance : 

        A single Python inheritance is when a single class inherits from a class.

        Example :

            >>> x=0
            >>> class fruit:
                            def __init__(self):
                                            global x
                                            x+=1
                                            print("I'm a fruit")                          
            >>> class citrus(fruit):
                            def __init__(self):
                                            super().__init__()
                                            global x
                                            x+=2
                                            print("I'm citrus")                           
            >>> x

        Output : 

            >>> lime=citrus()
            I'm a fruit
            I'm a citrus
    
    2)  Multiple Inheritance : 

        Multiple Python inheritance are when a class inherits from multiple base classes.

        Example : 

                >>> class Color:
                        pass
                >>> class Fruit:
                                pass
                >>> class Orange(Color,Fruit):
                                pass
                >>> issubclass(Orange,Color) and issubclass(Orange,Fruit)
    
        Output :

            True

    3) Multilevel Inheritance : 

        When one class inherits from another, which in turn inherits from another, it is multilevel python inheritance.

        Example :

                >>> class A:
                    x=1         
                >>> class B(A):
                                pass
                >>> class C(B):
                                pass
                >>> cobj=C()
                >>> cobj.x

        Output : 
            1
    
    4) Hierarchical Inheritance : 

        When more than one class inherits from a class, it is hierarchical Python inheritance.

        Example :

            >>> class A:
                            pass
            >>> class B(A):
                            pass
            >>> class C(A):
                            pass
            >>> issubclass(B,A) and issubclass(C,A)

        Output : 

            True

    5) Hybrid Inheritance : 

        Hybrid Python inheritance is a combination of any two kinds of inheritance.

        Example : 

            >>> class A:
                x=1       
            >>> class B(A):
                        pass
            >>> class C(A):
                        pass
            >>> class D(B,C):
                        pass
            >>> dobj=D()
            >>> dobj.x

        Output : 
            
            1

* super() in python : 

    With inheritance, the super() function in python actually comes in quite handy. 
    It allows us to call a method from the parent class. Let’s define a new class for this.

    Example:

        >>> class Vehicle:
                    def start(self):
                                    print("Starting engine")
                    def stop(self):
                                    print("Stopping engine")                            
        >>> class TwoWheeler(Vehicle):
                        def say(self):
                            super().start()
                            print("I have two wheels")
                            super().stop()                            
        >>> Pulsar=TwoWheeler()
        >>> Pulsar.say()

    Output : 

        Starting engine
        I have two wheels
        Stopping engine